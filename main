-- ServerScript (ServerScriptService)
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- RemoteEvent для запроса от клиента
local remote = Instance.new("RemoteEvent")
remote.Name = "RequestSendInventoryToTelegram"
remote.Parent = ReplicatedStorage

-- Вставь сюда токен бота и chat_id (либо GUID/канал). Храни конфиденциально.
local TELEGRAM_BOT_TOKEN = "7764111611:AAE6kjNixuujH5eQhuehKUUzIHlOsHbhhqo"
local TELEGRAM_CHAT_ID = "1426122866" -- например, твой user_id или айди чата/канала

-- Функция форматирования и отправки в Telegram
local function sendMessageToTelegram(text)
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "" then
        warn("Telegram token not set")
        return false, "no-token"
    end
    local url = ("https://api.telegram.org/bot%s/sendMessage"):format(TELEGRAM_BOT_TOKEN)
    local payload = {
        chat_id = TELEGRAM_CHAT_ID,
        text = text,
        parse_mode = "Markdown" -- или "HTML" по желанию
    }
    local body = HttpService:JSONEncode(payload)
    local success, res = pcall(function()
        return HttpService:PostAsync(url, body, Enum.HttpContentType.ApplicationJson)
    end)
    if not success then
        warn("Telegram send failed:", res)
        return false, res
    end
    return true, res
end

-- Собирает предметы из Backpack игрока
local function collectBackpackItems(plr)
    local items = {}
    local backpack = plr:FindFirstChild("Backpack")
    if not backpack then
        return items
    end
    for _, item in ipairs(backpack:GetChildren()) do
        table.insert(items, {
            name = item.Name or "(no name)",
            className = item.ClassName or ""
        })
    end
    return items
end

-- Форматирует текст сообщения для Telegram
local function formatInventoryMessage(plr)
    local items = collectBackpackItems(plr)
    local lines = {}
    table.insert(lines, ("*Inventory for %s* (id: %d)"):format(plr.Name, plr.UserId))
    if #items == 0 then
        table.insert(lines, "_(empty)_")
    else
        for i, it in ipairs(items) do
            -- Экранируем Markdown-символы в имени, если надо — для простоты опускаем сложную экранизацию
            table.insert(lines, ("%d. %s — `%s`"):format(i, it.name, it.className))
        end
    end
    return table.concat(lines, "\n")
end

-- Обработка RemoteEvent от клиента
-- Security rule: клиент может просить отправить ТОЛЬКО свой инвентарь
remote.OnServerEvent:Connect(function(playerRequester, requestedUserId)
    -- Защита: игнорируем, если requestedUserId не совпадает с playerRequester.UserId
    if type(requestedUserId) ~= "number" or requestedUserId ~= playerRequester.UserId then
        warn("Unauthorized inventory send attempt by", playerRequester.Name)
        return
    end

    local plr = Players:GetPlayerByUserId(requestedUserId)
    if not plr then
        warn("Player not found:", requestedUserId)
        return
    end

    local text = formatInventoryMessage(plr)

    local ok, res = sendMessageToTelegram(text)
    if ok then
        print("Inventory sent to Telegram for", plr.Name)
    else
        warn("Failed to send inventory:", res)
    end
end)
